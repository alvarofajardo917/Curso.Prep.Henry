Un concepto muy importante en Javascript es la capacidad de pasar una funcién como argumento a
otra funcidn. Estas funciones se denominan callbacks . Estas funciones pueden llamarse en cualquier
momento y pasar argumentos dentro de la funcién. Pronto descubriremos por qué las devoluciones de
llamada son tan importantes para Javascript. La convencién es usar cb como argumento para la
variable que se usaré de callback.


-forEach es un bucle for integrado en cada array. .forEach toma un callback como su Gnico
argumento, e itera sobre cada elemento de la matriz y llama al callback en él. El callback puede tomar
dos argumentos, el primero es el elemento en si, el segundo es el indice del elemento (este
argumento es opcional).

«reduce ejecutaré un bucle en nuestra matriz con la intencién de reducir cada elemento en un
elemento que se devuelve. Como es el primer argumento, acepta un callback que toma dos
argumentos, primero un ‘acumulador’ (el resultado del método de reduccién hasta ahora), y el
segundo es el elemento en el que se encuentra actualmente. El callback debe contener siempre una
declaracién de devolucién (“return”). .reduce también toma un segundo argumento opcional, que
seria el acumulador de arranque (“starting accumulator”). Si no se suministra el acumulador de
arranque, la reduccién comenzaré en el primer elemento de la matriz. .reduce siempre devolvera el
acumulador cuando termine de recorrer los elementos.

.map_ se usa cuando queremos cambiar cada elemento de una matriz de la misma manera. map
toma una devolucién de llamada como Gnico argumento. Al igual que el método .forEach , el

callback tiene el elemento y el indice de argumentos opcionales. A diferencia de .reduce , .map
devolveré toda la matriz.
